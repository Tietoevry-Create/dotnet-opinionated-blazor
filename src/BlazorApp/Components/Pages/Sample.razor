@page "/sample"
@using FluentValidation.Results
@inject ILogger<Sample> logger
@inject NavigationManager navigationManager

<PageTitle>Sample form</PageTitle>

<Prose>
    <h1>Sample form</h1>
    <p>A Blazor <code>&lt;EditForm /&gt;</code> demo that shows how you can work with Blazor Static SSR components in a classic request/response mode.</p>
</Prose>

<div class="mt-6 bg-white rounded shadow py-6 px-3 sm:px-6 lg:px-8">
    <h2 class="text-2xl font-semibold tracking-tight">Fill out form</h2>

    @if (this.ValidationResult is { IsValid: true }
         && !string.IsNullOrWhiteSpace(this.FormModel.Email)
         && this.FormModel.AcceptTermsForStoringContactDetails)
    {
        <AlertMessage Heading="Form was submitted">
            <p>E-mail address submitted was <span class="font-semibold">@this.FormModel.Email</span></p>
            <p class="mt-1.5"><span class="font-semibold">@this.FormModel.AcceptTermsForStoringContactDetails.ToString()</span>, you accepted terms.</p>
        </AlertMessage>
    }

    <ErrorMessageSummary Errors="@this.ValidationResult?.Errors"/>

    <EditForm FormName="SampleForm" Model="@this.FormModel" OnSubmit="@HandleSubmit" action="@(new Uri(navigationManager.Uri).AbsolutePath)" method="POST" novalidate>
        <FormRow>
            <LabelAndErrorMessage Errors="@this.ValidationResult?.Errors" ForId="Email" Label="E-mail" />
            <InputText @bind-Value="this.FormModel!.Email" maxlength="50" id="Email" />
        </FormRow>

        <FormRow>
            <FormRowErrorMessage Errors="@this.ValidationResult?.Errors" ForId="AcceptTermsForStoringContactDetails"/>
            <div class="flex items-center gap-x-3 ml-1">
                @if (this.FormModel.AcceptTermsForStoringContactDetails)
                {
                    <input id="AcceptTermsForStoringContactDetails" name="FormModel.AcceptTermsForStoringContactDetails" type="checkbox" value="true" checked>
                }
                else
                {
                    <input id="AcceptTermsForStoringContactDetails" name="FormModel.AcceptTermsForStoringContactDetails" type="checkbox" value="true">
                }

                <label for="AcceptTermsForStoringContactDetails">Accept terms &amp; conditions</label>
            </div>
        </FormRow>

        <button type="submit" class="button-primary mt-6">Submit</button>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private SampleForm FormModel { get; set; } = new();

    private ValidationResult? ValidationResult { get; set; }

    protected void HandleSubmit()
    {
        // Validate form model
        this.ValidationResult = this.FormModel.Validate();

        if (!this.ValidationResult.IsValid)
        {
            foreach (var e in this.ValidationResult.Errors)
            {
                logger.LogInformation($"{e.PropertyName}: {e.ErrorMessage}");
            }
        }
        else
        {
            logger.LogInformation("Form is valid: " + this.FormModel.Email);
        }
    }
}
