@using FluentValidation.Results
@implements IComponentLibraryExample

@{
    var tempId = Guid.NewGuid().ToString("N");
}

<div role="alert" id="alert@(tempId)"></div>

<div class="hidden">
    @if (this.Errors is {Count: > 0})
    {
        <div class="p-3 mt-3 border-4 border-red-600" data-script="on load set #alert@(tempId).innerHTML to my.outerHTML">
            <h3 class="text-xl font-semibold tracking-tight">
                Problems in form
            </h3>
            <ul class="mt-3 space-y-1.5">
                @foreach (var error in this.Errors)
                {
                    var hrefValue = "#" + error.PropertyName;
                    <li>
                        @* Ugly hack to not get anchor link clicks caught by Blazor script *@
                        <a 
                            href="@hrefValue" 
                            data-script="on click or touchstart js event.preventDefault();event.stopPropagation();window.anchorLink.scrollIntoView('@(error.PropertyName)') end" 
                            class="font-bold underline text-red-600 hover:bg-yellow-200 hover:text-gray-900 hover:no-underline hover:outline-none focus:bg-yellow-200 focus:text-gray-900 focus:no-underline focus:outline-none">
                            @error.ErrorMessage
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<ValidationFailure>? Errors { get; set; }

    public static async Task<List<HtmlExample>> GetHtmlExamplesAsync(ComponentRenderingService componentRenderingService)
    {
        var list = new List<HtmlExample>();
        list.Add(new HtmlExample
        {
            ParentName = "Form components",
            Name = "Error message summary",
            Description = "Show above form when validation fails.",
            Html = await componentRenderingService.GetAsHtmlAsync<ErrorMessageSummary>(new Dictionary<string, object?>
            {
                { nameof(Errors), new List<ValidationFailure> { new("test3", "E-mail is a required field."), new("test4", "First name is a required field.") } },
            }),
        });
        return list;
    }
}
