@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<Prose>
    <h1>Weather</h1>
    <p>This component demonstrates showing data, <code>@@attribute [StreamRendering]</code> is at the top of the page so the table loads "later".</p>
    <p>We also have a hyperscript example on this page to check that we don't get a conflict with stream rendering.</p>
</Prose>

<div class="mt-10">
    <Prose>
        <h2>
            <span id="first">Hello</span>
            <span id="second">hyperscript!</span>
        </h2>
        <button class="button-primary" data-script="on click set my.innerText to #first.innerText + ' ' + #second.innerText">
            Click to concat the two spans as new button text
        </button>
    </Prose>
</div>

<div class="mt-10 shadow bg-white">
    @if (forecasts == null)
    {
        <SpinnerBlock LoadingText="Loading weather..." />
    }
    else
    {
        <table class="min-w-full divide-y divide-gray-300">
            <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Date</th>
                    <th scope="col" class="px-3 py-3.5 text-sm text-center font-semibold text-gray-900">Temp. (C)</th>
                    <th scope="col" class="py-3.5 pr-4 pl-3 text-sm text-center font-semibold text-gray-900 sm:pr-6">Temp. (F)</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td class="py-4 pl-4 pr-3 text-sm sm:pl-6">@forecast.Date.ToShortDateString()</td>
                        <td class="px-3 py-4 font-medium text-sm text-center">@forecast.TemperatureC</td>
                        <td class="py-4 pr-4 pl-3 font-medium text-sm text-center">@forecast.TemperatureF</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(1200);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(1, 35),
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
