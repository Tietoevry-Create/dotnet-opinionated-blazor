@page "/sample"
@using FluentValidation.Results
@using FluentValidation
@inject ILogger<Sample> logger
@inject NavigationManager navigationManager
@inject IValidator<SampleForm> sampleFormValidator

<PageTitle>Sample form</PageTitle>

<Prose>
    <h1>Sample form</h1>
    <p>A Blazor <code>&lt;EditForm /&gt;</code> demo that shows how you can work with Blazor SSR components in a classic request/response mode.</p>
    <p>Response from server with full page load. No client-side interactivity on this page except for some hacks to be able to use anchor links with the form error summary without Blazor script issues.</p>
</Prose>

<h2 class="text-2xl font-semibold tracking-tight mt-10">Fill out form</h2>

@if (!string.IsNullOrWhiteSpace(this.FormModel.Email) && this.FormModel.AcceptTermsForStoringContactDetails)
{
    <div class="p-3 border-4 border-green-600 mt-3">
        <h3 class="text-xl font-semibold tracking-tight">Form submitted</h3>
        <p class="mt-1">E-mail: <span class="font-semibold">@this.FormModel.Email</span></p>
        <p>Accepted terms: <span class="font-semibold">@this.FormModel.AcceptTermsForStoringContactDetails.ToString().ToLower()</span></p>
    </div>
}

<ErrorMessageSummary Errors="@this.ValidationResult?.Errors"/>

<EditForm FormName="SampleForm" Model="@this.FormModel" OnSubmit="@HandleSubmit" action="@(new Uri(navigationManager.Uri).AbsolutePath)" method="POST" novalidate>
    <FormRow>
        <LabelAndErrorMessage Errors="@this.ValidationResult?.Errors" ForId="Email" Label="E-mail" />
        <InputText @bind-Value="this.FormModel!.Email" maxlength="50" id="Email" />
    </FormRow>

    <FormRow>
        <FormRowErrorMessage Errors="@this.ValidationResult?.Errors" ForId="AcceptTermsForStoringContactDetails"/>
        <div class="flex items-center gap-x-3 ml-1">
            @if (this.FormModel.AcceptTermsForStoringContactDetails)
            {
                <input id="AcceptTermsForStoringContactDetails" name="FormModel.AcceptTermsForStoringContactDetails" type="checkbox" value="true" checked>
            }
            else
            {
                <input id="AcceptTermsForStoringContactDetails" name="FormModel.AcceptTermsForStoringContactDetails" type="checkbox" value="true">
            }

            <label for="AcceptTermsForStoringContactDetails">Accept terms &amp; conditions</label>
        </div>
    </FormRow>

    <button type="submit" class="button-primary mt-6">Submit</button>
</EditForm>

@code {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private SampleForm FormModel { get; set; } = new();

    private ValidationResult? ValidationResult { get; set; }

    protected async Task HandleSubmit()
    {
        // Validate form model
        this.ValidationResult = await sampleFormValidator.ValidateAsync(this.FormModel);

        if (!this.ValidationResult.IsValid)
        {
            foreach (var e in this.ValidationResult.Errors)
            {
                logger.LogInformation($"{e.PropertyName}: {e.ErrorMessage}");
            }
        }
        else
        {
            logger.LogInformation("Form is valid: " + this.FormModel.Email);
        }
    }
}
